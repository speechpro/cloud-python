# coding: utf-8

"""
    ASR documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AdvancedRecognitionRequestDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'package_id': 'str',
        'channels': 'list[int]',
        'data': 'str'
    }

    attribute_map = {
        'package_id': 'package_id',
        'channels': 'channels',
        'data': 'data'
    }

    def __init__(self, package_id=None, channels=None, data=None):  # noqa: E501
        """AdvancedRecognitionRequestDto - a model defined in Swagger"""  # noqa: E501

        self._package_id = None
        self._channels = None
        self._data = None
        self.discriminator = None

        if package_id is not None:
            self.package_id = package_id
        if channels is not None:
            self.channels = channels
        self.data = data

    @property
    def package_id(self):
        """Gets the package_id of this AdvancedRecognitionRequestDto.  # noqa: E501

        Recognize with package  # noqa: E501

        :return: The package_id of this AdvancedRecognitionRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._package_id

    @package_id.setter
    def package_id(self, package_id):
        """Sets the package_id of this AdvancedRecognitionRequestDto.

        Recognize with package  # noqa: E501

        :param package_id: The package_id of this AdvancedRecognitionRequestDto.  # noqa: E501
        :type: str
        """

        self._package_id = package_id

    @property
    def channels(self):
        """Gets the channels of this AdvancedRecognitionRequestDto.  # noqa: E501

        Specific channels to process  # noqa: E501

        :return: The channels of this AdvancedRecognitionRequestDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this AdvancedRecognitionRequestDto.

        Specific channels to process  # noqa: E501

        :param channels: The channels of this AdvancedRecognitionRequestDto.  # noqa: E501
        :type: list[int]
        """

        self._channels = channels

    @property
    def data(self):
        """Gets the data of this AdvancedRecognitionRequestDto.  # noqa: E501

        Binary audio file as Base64 string  # noqa: E501

        :return: The data of this AdvancedRecognitionRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this AdvancedRecognitionRequestDto.

        Binary audio file as Base64 string  # noqa: E501

        :param data: The data of this AdvancedRecognitionRequestDto.  # noqa: E501
        :type: str
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdvancedRecognitionRequestDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
