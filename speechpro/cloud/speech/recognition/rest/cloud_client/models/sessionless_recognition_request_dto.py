# coding: utf-8

"""
    ASR documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from speechpro.cloud.speech.recognition.rest.cloud_client.models.recognition_request_dto import RecognitionRequestDto  # noqa: F401,E501
from speechpro.cloud.speech.recognition.rest.cloud_client.models.start_session_request import StartSessionRequest  # noqa: F401,E501


class SessionlessRecognitionRequestDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_info': 'StartSessionRequest',
        'recognition_request': 'RecognitionRequestDto'
    }

    attribute_map = {
        'user_info': 'user_info',
        'recognition_request': 'recognition_request'
    }

    def __init__(self, user_info=None, recognition_request=None):  # noqa: E501
        """SessionlessRecognitionRequestDto - a model defined in Swagger"""  # noqa: E501

        self._user_info = None
        self._recognition_request = None
        self.discriminator = None

        self.user_info = user_info
        self.recognition_request = recognition_request

    @property
    def user_info(self):
        """Gets the user_info of this SessionlessRecognitionRequestDto.  # noqa: E501

        User credentials  # noqa: E501

        :return: The user_info of this SessionlessRecognitionRequestDto.  # noqa: E501
        :rtype: StartSessionRequest
        """
        return self._user_info

    @user_info.setter
    def user_info(self, user_info):
        """Sets the user_info of this SessionlessRecognitionRequestDto.

        User credentials  # noqa: E501

        :param user_info: The user_info of this SessionlessRecognitionRequestDto.  # noqa: E501
        :type: StartSessionRequest
        """
        if user_info is None:
            raise ValueError("Invalid value for `user_info`, must not be `None`")  # noqa: E501

        self._user_info = user_info

    @property
    def recognition_request(self):
        """Gets the recognition_request of this SessionlessRecognitionRequestDto.  # noqa: E501

        User credentials  # noqa: E501

        :return: The recognition_request of this SessionlessRecognitionRequestDto.  # noqa: E501
        :rtype: RecognitionRequestDto
        """
        return self._recognition_request

    @recognition_request.setter
    def recognition_request(self, recognition_request):
        """Sets the recognition_request of this SessionlessRecognitionRequestDto.

        User credentials  # noqa: E501

        :param recognition_request: The recognition_request of this SessionlessRecognitionRequestDto.  # noqa: E501
        :type: RecognitionRequestDto
        """
        if recognition_request is None:
            raise ValueError("Invalid value for `recognition_request`, must not be `None`")  # noqa: E501

        self._recognition_request = recognition_request

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SessionlessRecognitionRequestDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
