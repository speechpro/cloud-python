# coding: utf-8

"""
    TTS documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from speechpro.cloud.speech.synthesis.rest.cloud_client.models.credentials import Credentials  # noqa: F401,E501
from speechpro.cloud.speech.synthesis.rest.cloud_client.models.synthesize_text import SynthesizeText  # noqa: F401,E501


class SynthesizeSessionlessRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'text': 'SynthesizeText',
        'credentials': 'Credentials',
        'voice_name': 'str',
        'audio': 'str'
    }

    attribute_map = {
        'text': 'text',
        'credentials': 'credentials',
        'voice_name': 'voice_name',
        'audio': 'audio'
    }

    def __init__(self, text=None, credentials=None, voice_name=None, audio=None):  # noqa: E501
        """SynthesizeSessionlessRequest - a model defined in Swagger"""  # noqa: E501

        self._text = None
        self._credentials = None
        self._voice_name = None
        self._audio = None
        self.discriminator = None

        self.text = text
        self.credentials = credentials
        self.voice_name = voice_name
        self.audio = audio

    @property
    def text(self):
        """Gets the text of this SynthesizeSessionlessRequest.  # noqa: E501

        Text for synthesize to speech  # noqa: E501

        :return: The text of this SynthesizeSessionlessRequest.  # noqa: E501
        :rtype: SynthesizeText
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this SynthesizeSessionlessRequest.

        Text for synthesize to speech  # noqa: E501

        :param text: The text of this SynthesizeSessionlessRequest.  # noqa: E501
        :type: SynthesizeText
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def credentials(self):
        """Gets the credentials of this SynthesizeSessionlessRequest.  # noqa: E501

        Credentials  # noqa: E501

        :return: The credentials of this SynthesizeSessionlessRequest.  # noqa: E501
        :rtype: Credentials
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this SynthesizeSessionlessRequest.

        Credentials  # noqa: E501

        :param credentials: The credentials of this SynthesizeSessionlessRequest.  # noqa: E501
        :type: Credentials
        """
        if credentials is None:
            raise ValueError("Invalid value for `credentials`, must not be `None`")  # noqa: E501

        self._credentials = credentials

    @property
    def voice_name(self):
        """Gets the voice_name of this SynthesizeSessionlessRequest.  # noqa: E501

        Name of name  # noqa: E501

        :return: The voice_name of this SynthesizeSessionlessRequest.  # noqa: E501
        :rtype: str
        """
        return self._voice_name

    @voice_name.setter
    def voice_name(self, voice_name):
        """Sets the voice_name of this SynthesizeSessionlessRequest.

        Name of name  # noqa: E501

        :param voice_name: The voice_name of this SynthesizeSessionlessRequest.  # noqa: E501
        :type: str
        """
        if voice_name is None:
            raise ValueError("Invalid value for `voice_name`, must not be `None`")  # noqa: E501

        self._voice_name = voice_name

    @property
    def audio(self):
        """Gets the audio of this SynthesizeSessionlessRequest.  # noqa: E501

        Format of response audio  # noqa: E501

        :return: The audio of this SynthesizeSessionlessRequest.  # noqa: E501
        :rtype: str
        """
        return self._audio

    @audio.setter
    def audio(self, audio):
        """Sets the audio of this SynthesizeSessionlessRequest.

        Format of response audio  # noqa: E501

        :param audio: The audio of this SynthesizeSessionlessRequest.  # noqa: E501
        :type: str
        """
        if audio is None:
            raise ValueError("Invalid value for `audio`, must not be `None`")  # noqa: E501

        self._audio = audio

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SynthesizeSessionlessRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
